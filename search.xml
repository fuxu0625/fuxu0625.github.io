<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[分布式---数据库扩展]]></title>
      <url>http://fuxu0625.com/2017/03/06/fenbushi/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>总结：</p>
<h3 id="数据库扩展"><a href="#数据库扩展" class="headerlink" title="数据库扩展"></a>数据库扩展</h3><hr>
<p><img src="http://ocpue1vvp.bkt.clouddn.com/ada.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM---类加载]]></title>
      <url>http://fuxu0625.com/2017/01/08/jvm-classloader/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><p>  .class文件读入到内存中，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类。</p>
<h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p><img src="http://ocpue1vvp.bkt.clouddn.com/shunxu.png" alt=""><br>   除解析过程外，其他阶段顺序固定。解析阶段在某些情况下可以在初始化之后再开始，这是为了运行时动态绑定特性（JIT例如接口只在调用的时候才知道具体实现的是哪个子类）</p>
<hr>
<p><strong>加载</strong>:加载类的二进制数据</p>
<p>  通常也被称作“装载”，主要完成：</p>
<ul>
<li>通过“类全名”来获取定义此类的二进制字节流</li>
<li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构</li>
<li>在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口<br>相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</li>
</ul>
<hr>
<p><strong>验证</strong>:确保被加载的类的正确性</p>
<p>确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。主要验证：</p>
<ul>
<li>文件格式验证：<br> 验证字节流是否符合Class文件格式的规范；例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li>
<li>元数据验证：<br>对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外</li>
<li>字节码验证<br> 通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的</li>
<li>符号引用验证<br> 确保解析动作能正确执行</li>
</ul>
<hr>
<p><strong>准备</strong>:为类的静态变量分配内存，并将其初始化为默认值</p>
<p> 为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配</p>
<ul>
<li>内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</li>
<li><p>初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static int value = 3；</div></pre></td></tr></table></figure>
<p>变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。</p>
<p>这里还需要注意如下几点：</p>
<p>1、对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。<br>2、对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。<br>3、对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。<br>4、如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值<br>5、如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。<br>假设上面的类变量value被定义为： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static final int value = 3；</div></pre></td></tr></table></figure>
<p>编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3。我们可以理解为static final常量在编译期就将其结果放入了调用它的类的常量池中</p>
</li>
</ul>
<hr>
<p><strong>解析</strong>:把类中的符号引用转换为直接引用</p>
<p>  解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口<br>  方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任<br>  何字面量。</p>
<hr>
<p> <strong>初始化</strong></p>
<p>为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：</p>
<ul>
<li>声明类变量是指定初始值</li>
<li>使用静态代码块为类变量指定初始值</li>
</ul>
<p>JVM初始化步骤</p>
<pre><code>1、假如这个类还没有被加载和连接，则程序先加载并连接该类
2、假如该类的直接父类还没有被初始化，则先初始化其直接父类
3、假如类中有初始化语句，则系统依次执行这些初始化语句
类初始化时机：只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种：
- 创建类的实例，也就是new的方式
- 访问某个类或接口的静态变量，或者对该静态变量赋值
- 调用类的静态方法
- 反射（如Class.forName(“com.shengsiyuan.Test”)）
- 初始化某个类的子类，则其父类也会被初始化
- Java虚拟机启动时被标明为启动类的类（Java Test），直接使用java.exe命令来运行某个主类
结束生命周期
在如下几种情况下，Java虚拟机将结束生命周期
- 执行了System.exit()方法
- 程序正常执行结束
- 程序在执行过程中遇到了异常或错误而异常终止
- 由于操作系统出现错误而导致Java虚拟机进程终止
</code></pre><hr>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p><img src="http://ocpue1vvp.bkt.clouddn.com/classloader.png" alt=""></p>
<h2 id="类加载方式"><a href="#类加载方式" class="headerlink" title="类加载方式"></a>类加载方式</h2><p>  有三种方式：<br> 1、命令行启动应用时候由JVM初始化加载<br> 2、通过Class.forName()方法动态加载<br> 3、通过ClassLoader.loadClass()方法动态加载<br><em>注：<br> <em>*Class.forName()和ClassLoader.loadClass()区别:</em></em><br>Class.forName()：将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块；<br>ClassLoader.loadClass():只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。<br>Class.forName(name, initialize, loader)带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象 。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM---GC]]></title>
      <url>http://fuxu0625.com/2016/12/07/jvm-gc/</url>
      <content type="html"><![CDATA[<p>关于JVM是每个Java程序员必须了解的，接下来我会持续学习并总结：</p>
<h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><hr>
<p><img src="http://ocpue1vvp.bkt.clouddn.com/gc.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java基础与干货---集合]]></title>
      <url>http://fuxu0625.com/2016/09/06/jihe/</url>
      <content type="html"><![CDATA[<p>总结了一下关于Java集合的知识点，干货如下：</p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><hr>
<p><img src="http://ocpue1vvp.bkt.clouddn.com/%E9%9B%86%E5%90%88.png" alt=""></p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p><img src="http://ocpue1vvp.bkt.clouddn.com/list.png" alt=""></p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><img src="http://ocpue1vvp.bkt.clouddn.com/Map.png" alt=""></p>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><img src="http://ocpue1vvp.bkt.clouddn.com/set.png" alt=""></p>
<p><a href="http://naotu.baidu.com/file/87803853799c5ff751b3ae2d8ce0018f?token=6508b9b59c568995" target="_blank" rel="external">查看完整</a></p>
<p><a href="http://www.cnblogs.com/skywang12345/p/3323085.html" target="_blank" rel="external">参考文档1(强烈推荐)</a><br><a href="http://www.jianshu.com/p/c5f85e9c0098" target="_blank" rel="external">参考文档2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java基础与干货---单例]]></title>
      <url>http://fuxu0625.com/2016/08/31/danli/</url>
      <content type="html"><![CDATA[<p>单例能做那些事:</p>
<ul>
<li>延迟加载</li>
<li>线程安全</li>
<li>没有性能问题</li>
<li>防止序列化产生新对象</li>
<li>防止反射攻击</li>
</ul>
<h3 id="最简单的单例—饿汉式"><a href="#最简单的单例—饿汉式" class="headerlink" title="最简单的单例—饿汉式"></a>最简单的单例—<strong>饿汉式</strong></h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static final Singleton INSTANCE = new Singleton();</div><div class="line">    // 私有化构造函数</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种单例的写法最简单，但是缺点是一旦类被加载，单例就会初始化，没有实现懒加载。而且当实现了Serializable接口后，反序列化时单例会被破坏。</p>
<p>实现Serializable接口需要重写 <strong>readResolve</strong>，才能保证其反序列化依旧是单例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Singleton implements Serializable &#123;</div><div class="line">    private static final Singleton INSTANCE = new Singleton();</div><div class="line">    // 私有化构造函数</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 如果实现了Serializable, 必须重写这个方法</div><div class="line">     */</div><div class="line">    private Object readResolve() throws ObjectStreamException &#123;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最体现技术的单例—懒汉式"><a href="#最体现技术的单例—懒汉式" class="headerlink" title="最体现技术的单例—懒汉式"></a>最体现技术的单例—<strong>懒汉式</strong></h3><hr>
<p>懒汉式即实现延迟加载的单例，为上述饿汉式的优化形式。而因其仍需要进一步优化，往往成为面试考点。</p>
<p>懒汉式的最初形式是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton INSTANCE;</div><div class="line">    private Singleton ()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance() &#123;</div><div class="line">     if (INSTANCE == null) &#123;</div><div class="line">         INSTANCE = new Singleton();</div><div class="line">     &#125;</div><div class="line">     return INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种写法就轻松实现了单例的懒加载，只有调用了<strong>getInstance</strong>方法才会初始化。但是这样的写法出现了新的问题–线程不安全。当多个线程调用<strong>getInstance</strong>方法时，可能会创建多个实例，因此需要对其进行同步。</p>
<p>如何使其线程安全呢？简单，加个<strong>synchronized</strong>关键字就行了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static synchronized Singleton getInstance() &#123;</div><div class="line">    if (INSTANCE == null) &#123;</div><div class="line">        INSTANCE = new Singleton();</div><div class="line">    &#125;</div><div class="line">    return INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可是…这样又出现了性能问题，简单粗暴的同步整个方法，导致同一时间内只有一个线程能够调用<strong>getInstance</strong>方法。</p>
<p>因为仅仅需要对初始化部分的代码进行同步，所以再次进行优化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static Singleton getSingleton() &#123;</div><div class="line">    if (INSTANCE == null) &#123;               // 第一次检查</div><div class="line">        synchronized (Singleton.class) &#123;</div><div class="line">            if (INSTANCE == null) &#123;      // 第二次检查</div><div class="line">                INSTANCE = new Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return INSTANCE ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  执行两次检测很有必要：当多线程调用时，如果多个线程同时执行完了第一次检查，其中一个进入同步代码块创建了实例，后面的线程因第二次检测不会创建新实例。</p>
<p>这段代码看起来很完美，但仍旧存在问题，以下内容引用自黑桃夹克大神的如何正确地写出单例模式</p>
<p>  这段代码看起来很完美，很可惜，它是有问题。主要在于<strong>instance = new Singleton()</strong>这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p>
<ul>
<li>给 <strong>instance</strong> 分配内存</li>
<li>调用 <strong>Singleton</strong> 的构造函数来初始化成员变量</li>
<li>将<strong>instance</strong>对象指向分配的内存空间（执行完这步 <strong>instance</strong> 就为非 null 了）</li>
</ul>
<p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p>
<p>我们只需要将 <strong>instance</strong>变量声明成 <strong>volatile</strong> 就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private volatile static Singleton INSTANCE; //声明成 volatile</div><div class="line">    private Singleton ()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getSingleton() &#123;</div><div class="line">        if (INSTANCE == null) &#123;                         </div><div class="line">            synchronized (Singleton.class) &#123;</div><div class="line">                if (INSTANCE == null) &#123;       </div><div class="line">                    INSTANCE = new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 <strong>volatile</strong>变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p>
<p>但是特别注意在 Java 5 以前的版本使用了 <strong>volatile</strong> 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 <strong>volatile</strong> 变量前后的代码仍然存在重排序问题。这个 <strong>volatile</strong>屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 <strong>volatile</strong>。<br>至此，这样的懒汉式才是没有问题的懒汉式。</p>
<h3 id="内部类实现单例"><a href="#内部类实现单例" class="headerlink" title="内部类实现单例"></a>内部类实现单例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123; </div><div class="line">    /** </div><div class="line">     * 类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例没有绑定关系， </div><div class="line">     * 而且只有被调用到才会装载，从而实现了延迟加载 </div><div class="line">     */ </div><div class="line">    private static class SingletonHolder&#123; </div><div class="line">        /** </div><div class="line">         * 静态初始化器，由JVM来保证线程安全 </div><div class="line">         */ </div><div class="line">        private static final Singleton instance = new Singleton(); </div><div class="line">    &#125; </div><div class="line">    /** </div><div class="line">     * 私有化构造方法 </div><div class="line">     */ </div><div class="line">    private Singleton()&#123; </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    public static  Singleton getInstance()&#123; </div><div class="line">        return SingletonHolder.instance; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用内部类来维护单例的实例，当<strong>Singleton</strong>被加载时，其内部类并不会被初始化，故可以确保当 <strong>Singleton</strong>类被载入JVM时，不会初始化单例类。只有 <strong>getInstance()</strong> 方法调用时，才会初始化 <strong>instance</strong>。同时，由于实例的建立是时在类加载时完成，故天生对多线程友好，<strong>getInstance()</strong> 方法也无需使用同步关键字。</p>
<h3 id="年度最佳实践单例—枚举"><a href="#年度最佳实践单例—枚举" class="headerlink" title="年度最佳实践单例—枚举"></a>年度最佳实践单例—<strong>枚举</strong></h3><hr>
<p>这货长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum Singleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种方式的好处是：</p>
<p>1、利用的枚举的特性实现单例<br>2、由JVM保证线程安全<br>3、序列化和反射攻击已经被枚举解决</p>
<p>调用方式为<code>Singleton.INSTANCE</code>, 出自《Effective Java》第二版第三条: 用私有构造器或枚举类型强化Singleton属性。</p>
<p><a href="http://www.jianshu.com/p/e84529b464d3" target="_blank" rel="external">原文章</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建Blog的初衷]]></title>
      <url>http://fuxu0625.com/2016/08/29/aaaa/</url>
      <content type="html"><![CDATA[<p>   拖延症晚期的我，今天起有了自己的Blog！说到为什么要搭自己的博客，这可要好好说道说道。<a id="more"></a><br> 其实很久之前，大概15年还没毕业的时候就有搭建自己blog的想法，一来可以总结一些知识点，二来可以当做自己的一张”名片”，再不济可以拿来跟小伙伴显摆显摆（哈哈~~原谅我的肤浅）。</p>
<p> 有了这么好的想法，只可惜自己比较懒还伴有拖延症，直到最近，我遇到了一些问题。众所周知作为程序员平时都会总结一些知识点，我也会总结一些，一般会放在印象笔记，有道云笔记上，大概像这样：<br><img src="http://ocpue1vvp.bkt.clouddn.com/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0.png" alt=""></p>
<p>还有这样：<br><img src="http://ocpue1vvp.bkt.clouddn.com/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0.png" alt=""></p>
<p>有什么感觉？对，一个字-乱。当然也是因为自己没有做好分类，毕竟自己是个随性的人 ，所以当找一个自己总结的知识点时，太费劲了。</p>
<p>这就是我终于动手搭blog的一个重要原因。</p>
]]></content>
    </entry>
    
  
  
</search>
