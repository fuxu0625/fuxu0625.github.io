<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java基础与干货---单例]]></title>
      <url>http://fuxu0625.com/2016/08/31/danli/</url>
      <content type="html"><![CDATA[<p>单例能做那些事:</p>
<ul>
<li>延迟加载</li>
<li>线程安全</li>
<li>没有性能问题</li>
<li>防止序列化产生新对象</li>
<li>防止反射攻击</li>
</ul>
<h3 id="最简单的单例—饿汉式"><a href="#最简单的单例—饿汉式" class="headerlink" title="最简单的单例—饿汉式"></a>最简单的单例—<strong>饿汉式</strong></h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static final Singleton INSTANCE = new Singleton();</div><div class="line">    // 私有化构造函数</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种单例的写法最简单，但是缺点是一旦类被加载，单例就会初始化，没有实现懒加载。而且当实现了Serializable接口后，反序列化时单例会被破坏。</p>
<p>实现Serializable接口需要重写 <strong>readResolve</strong>，才能保证其反序列化依旧是单例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Singleton implements Serializable &#123;</div><div class="line">    private static final Singleton INSTANCE = new Singleton();</div><div class="line">    // 私有化构造函数</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 如果实现了Serializable, 必须重写这个方法</div><div class="line">     */</div><div class="line">    private Object readResolve() throws ObjectStreamException &#123;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最体现技术的单例—懒汉式"><a href="#最体现技术的单例—懒汉式" class="headerlink" title="最体现技术的单例—懒汉式"></a>最体现技术的单例—<strong>懒汉式</strong></h3><hr>
<p>懒汉式即实现延迟加载的单例，为上述饿汉式的优化形式。而因其仍需要进一步优化，往往成为面试考点。</p>
<p>懒汉式的最初形式是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton INSTANCE;</div><div class="line">    private Singleton ()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance() &#123;</div><div class="line">     if (INSTANCE == null) &#123;</div><div class="line">         INSTANCE = new Singleton();</div><div class="line">     &#125;</div><div class="line">     return INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种写法就轻松实现了单例的懒加载，只有调用了<strong>getInstance</strong>方法才会初始化。但是这样的写法出现了新的问题–线程不安全。当多个线程调用<strong>getInstance</strong>方法时，可能会创建多个实例，因此需要对其进行同步。</p>
<p>如何使其线程安全呢？简单，加个<strong>synchronized</strong>关键字就行了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static synchronized Singleton getInstance() &#123;</div><div class="line">    if (INSTANCE == null) &#123;</div><div class="line">        INSTANCE = new Singleton();</div><div class="line">    &#125;</div><div class="line">    return INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可是…这样又出现了性能问题，简单粗暴的同步整个方法，导致同一时间内只有一个线程能够调用<strong>getInstance</strong>方法。</p>
<p>因为仅仅需要对初始化部分的代码进行同步，所以再次进行优化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static Singleton getSingleton() &#123;</div><div class="line">    if (INSTANCE == null) &#123;               // 第一次检查</div><div class="line">        synchronized (Singleton.class) &#123;</div><div class="line">            if (INSTANCE == null) &#123;      // 第二次检查</div><div class="line">                INSTANCE = new Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return INSTANCE ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  执行两次检测很有必要：当多线程调用时，如果多个线程同时执行完了第一次检查，其中一个进入同步代码块创建了实例，后面的线程因第二次检测不会创建新实例。</p>
<p>这段代码看起来很完美，但仍旧存在问题，以下内容引用自黑桃夹克大神的如何正确地写出单例模式</p>
<p>  这段代码看起来很完美，很可惜，它是有问题。主要在于<strong>instance = new Singleton()</strong>这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p>
<ul>
<li>给 <strong>instance</strong> 分配内存</li>
<li>调用 <strong>Singleton</strong> 的构造函数来初始化成员变量</li>
<li>将<strong>instance</strong>对象指向分配的内存空间（执行完这步 <strong>instance</strong> 就为非 null 了）</li>
</ul>
<p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p>
<p>我们只需要将 <strong>instance</strong>变量声明成 <strong>volatile</strong> 就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private volatile static Singleton INSTANCE; //声明成 volatile</div><div class="line">    private Singleton ()&#123;&#125;</div><div class="line"></div><div class="line">    public static Singleton getSingleton() &#123;</div><div class="line">        if (INSTANCE == null) &#123;                         </div><div class="line">            synchronized (Singleton.class) &#123;</div><div class="line">                if (INSTANCE == null) &#123;       </div><div class="line">                    INSTANCE = new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 <strong>volatile</strong>变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p>
<p>但是特别注意在 Java 5 以前的版本使用了 <strong>volatile</strong> 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 <strong>volatile</strong> 变量前后的代码仍然存在重排序问题。这个 <strong>volatile</strong>屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 <strong>volatile</strong>。<br>至此，这样的懒汉式才是没有问题的懒汉式。</p>
<h3 id="内部类实现单例"><a href="#内部类实现单例" class="headerlink" title="内部类实现单例"></a>内部类实现单例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123; </div><div class="line">    /** </div><div class="line">     * 类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例没有绑定关系， </div><div class="line">     * 而且只有被调用到才会装载，从而实现了延迟加载 </div><div class="line">     */ </div><div class="line">    private static class SingletonHolder&#123; </div><div class="line">        /** </div><div class="line">         * 静态初始化器，由JVM来保证线程安全 </div><div class="line">         */ </div><div class="line">        private static final Singleton instance = new Singleton(); </div><div class="line">    &#125; </div><div class="line">    /** </div><div class="line">     * 私有化构造方法 </div><div class="line">     */ </div><div class="line">    private Singleton()&#123; </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    public static  Singleton getInstance()&#123; </div><div class="line">        return SingletonHolder.instance; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用内部类来维护单例的实例，当<strong>Singleton</strong>被加载时，其内部类并不会被初始化，故可以确保当 <strong>Singleton</strong>类被载入JVM时，不会初始化单例类。只有 <strong>getInstance()</strong> 方法调用时，才会初始化 <strong>instance</strong>。同时，由于实例的建立是时在类加载时完成，故天生对多线程友好，<strong>getInstance()</strong> 方法也无需使用同步关键字。</p>
<h3 id="年度最佳实践单例—枚举"><a href="#年度最佳实践单例—枚举" class="headerlink" title="年度最佳实践单例—枚举"></a>年度最佳实践单例—<strong>枚举</strong></h3><hr>
<p>这货长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum Singleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种方式的好处是：</p>
<p>1、利用的枚举的特性实现单例<br>2、由JVM保证线程安全<br>3、序列化和反射攻击已经被枚举解决</p>
<p>调用方式为<code>Singleton.INSTANCE</code>, 出自《Effective Java》第二版第三条: 用私有构造器或枚举类型强化Singleton属性。</p>
<p>原文章(<a href="http://www.jianshu.com/p/e84529b464d3" target="_blank" rel="external">http://www.jianshu.com/p/e84529b464d3</a>)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://fuxu0625.com/2016/08/29/aaaa/</url>
      <content type="html"><![CDATA[<p>拖延症晚期的我，今天起有了自己的Blog！</p>
]]></content>
    </entry>
    
  
  
</search>
